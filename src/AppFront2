import { useState, useEffect } from "react";
import { Aptos, AptosConfig, Network, Account} from "@aptos-labs/ts-sdk";
import { ABI } from './abi.ts'
import { createSurfClient } from "@thalalabs/surf";
import { useWallet } from "@aptos-labs/wallet-adapter-react";

export const config= new AptosConfig ({network : Network.TESTNET});
export const aptos= new Aptos(config);

export const surfClient = createSurfClient(aptos).useABI(ABI);

const APTOS_COIN="0X1::aptos_coin::AptosCoin";
const COIN_STORE=`0x01::coin::CoinStore<${APTOS_COIN}>`;
const CONTRACT="0x3e88ab6d78869cee46bc200d51c3dda0b3ed18a756b677f519172fdc09793a33"; //transChain

function AppFront() {
  //const [cuenta, setCuenta] = useState()
  const {connect, account, connected, disconnect} = useWallet();

  /* useEffect(() => {
    setCuenta(Account.generate())
  },[])

  useEffect(()=>{
    console.log(`${cuenta?.accountAddress}`)},[cuenta]
  )
 */
  const inicializar = async () =>{
    const result =  await surfClient.entry.inicializar({
      typeArguments : [],
      functionArguments : [],
      account: cuenta,
    })

    console.log(result)
  }

  const addDependencia = async () =>{
    const result =  await surfClient.entry.add_dependencia({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,"Secretaria de cultura de Hidalgo","Pachuca","Telefono","Correo",1],
      account: cuenta,
    })

    console.log(result)
  }

  const addEnlace = async () =>{
    const result =  await surfClient.entry.add_enlace({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,"Josue Martinez","Docente",1,"Correo",1],
      account: cuenta,
    })

    console.log(result)
  }

  const addSolicitud = async () =>{
    const result =  await surfClient.entry.add_Solicitud({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,"Alfonso Ramírez","Correo",1,"Fecha",false,1],
      account: cuenta,
    })

    console.log(result)
  }

  const addRespuesta = async () =>{
    const result =  await surfClient.entry.add_Respuesta({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"Respuesta a Solicitud","https://dropbox.com/datos.pdf","Fecha",1],
      account: cuenta,
    })

    console.log(result)
  }

  const getDependencia = async () =>{
    const result =  await surfClient.view.get_Dependencia({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }
  const getEnlace = async () =>{
    const result =  await surfClient.view.get_Enlace({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }

  const getSolicitud = async () =>{
    const result =  await surfClient.view.get_Solicitud({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }
  const getRespuesta = async () =>{
    const result =  await surfClient.view.get_Respuesta({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }

  const delDependencia = async () =>{
    const result =  await surfClient.entry.erase_Dependencia({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }
  const delEnlace = async () =>{
    const result =  await surfClient.entry.erase_Enlace({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }

  const delSolicitud = async () =>{
    const result =  await surfClient.entry.erase_Solicitud({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }
  const delRespuesta = async () =>{
    const result =  await surfClient.entry.erase_Respuesta({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1],
      account: cuenta,
    })

    console.log(result)
  }

  const actDepCorreo = async () =>{
    const result =  await surfClient.entry.upd_Dep_correo({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"correoActualizado"],
      account: cuenta,
    })

    console.log(result)
  }
  const actDepDireccion = async () =>{
    const result =  await surfClient.entry.upd_Dep_direccion({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"direccionActualizado"],
      account: cuenta,
    })

    console.log(result)
  }

  const actDepTelefono = async () =>{
    const result =  await surfClient.entry.upd_Dep_telefono({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"telefonoActualizado"],
      account: cuenta,
    })

    console.log(result)
  }

  const actEnlCargo = async () =>{
    const result =  await surfClient.entry.upd_Enl_cargo({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"cargoActualizado"],
      account: cuenta,
    })

    console.log(result)
  }
  const actEnlCorreo = async () =>{
    const result =  await surfClient.entry.upd_Enl_correo({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"correoActualizado"],
      account: cuenta,
    })

    console.log(result)
  }

  const actEnlNombre = async () =>{
    const result =  await surfClient.entry.upd_Enl_nombre({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"nombreActualizado"],
      account: cuenta,
    })

    console.log(result)
  }

  const actResAnexos = async () =>{
    const result =  await surfClient.entry.upd_Res_anexos({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"anexoActualizado"],
      account: cuenta,
    })

    console.log(result)
  }
  const actResFecha = async () =>{
    const result =  await surfClient.entry.upd_Res_fecha({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"fechaActualizado"],
      account: cuenta,
    })

    console.log(result)
  }

  const actResInformacion = async () =>{
    const result =  await surfClient.entry.upd_Res_informacion({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,"informacionActualizado"],
      account: cuenta,
    })

    console.log(result)
  }
  const actResValidado = async () =>{
    const result =  await surfClient.entry.upd_Res_validado({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,true],
      account: cuenta,
    })

    console.log(result)
  }

  const actSolAtendido = async () =>{
    const result =  await surfClient.entry.upd_Sol_atendido({
      typeArguments : [],
      functionArguments : [cuenta.accountAddress,1,true],
      account: cuenta,
    })

    console.log(result)
  }

  const connexionWallet = async () => {
    if (connected){
      await disconnect();
    } else{
      await connect("Petra");
    }
  }

  return (
    <div className="AppFront">
      <table>
        <tbody>
        <tr>
          <td>
            {connected? `Cuenta Conectada: ${account?.address}`:"Ninguna"}
          </td>
          </tr>
          <tr>
          <td>
            <button onClick={connexionWallet}>{connected? "Desconectar":"Conectar"}</button>
          </td>
        </tr>
      </tbody>
      </table>
      <table>
        <tbody>
        <tr>Acciones para inicializar y crear elementos</tr>
        <tr></tr>
        <tr>
          <td>
            <button onClick={inicializar}>Inicializar</button>
          </td>
          <td>
            <button onClick={addDependencia}>Añadir Dependencia</button>
          </td>
          <td>
            <button onClick={addEnlace}>Añadir Enlace</button>
          </td>
          <td>
            <button onClick={addSolicitud}>Añadir Solicitud</button>
          </td>
          <td>
            <button onClick={addRespuesta}>Añadir Respuesta</button>
          </td>
        </tr>
        <tr></tr>
        <tr>Acciones para lectura de los datos creados en el blockchain</tr>
        <tr></tr>
        <tr>
          <td>
            <button onClick={getDependencia}>Obtener Dependencia</button>
          </td>
          <td>
            <button onClick={getEnlace}>Obtener Enlace</button>
          </td>
          <td>
            <button onClick={getSolicitud}>Obtener Solicitud</button>
          </td>
          <td>
            <button onClick={getRespuesta}>Obtener Respuesta</button>
          </td>
        </tr>
        <tr></tr>
        <tr>Acciones para borrar información del blockchain</tr>
        <tr></tr>
        <tr>
          <td>
            <button onClick={delDependencia}>Borrar Dependencia</button>
          </td>
          <td>
            <button onClick={delEnlace}>Borrar Enlace</button>
          </td>
          <td>
            <button onClick={delSolicitud}>Borrar Solicitud</button>
          </td>
          <td>
            <button onClick={delRespuesta}>Borrar Respuesta</button>
          </td>
        </tr>
        <tr></tr>
        <tr>Acciones para actualizar información en el blockchain</tr>
        <tr></tr>
        <tr>
          <td>
            <button onClick={actDepCorreo}>Actualizar Correo de Dependencia</button>
          </td>
          <td>
            <button onClick={actDepDireccion}>Actualizar Dirección de la Dependencia</button>
          </td>
          <td>
            <button onClick={actDepTelefono}>Actualizar Teléfono de la Dependencia</button>
          </td>
          <td>
            <button onClick={actEnlCargo}>Actualizar Cargo del Enlace</button>
          </td>
          <td>
            <button onClick={actEnlCorreo}>Actualizar Correo del Enlace</button>
          </td>
        </tr>
        <tr>
          <td>
            <button onClick={actEnlNombre}>Actualizar Nombre del Enlace</button>
          </td>
          <td>
           <button onClick={actResAnexos}>Actualizar anexos de la Respuesta</button>
          </td>
          <td>
            <button onClick={actResFecha}>Acualizar fecha de la Respuesta</button>
          </td>
          <td>
            <button onClick={actResInformacion}>Actualizar Información de la Respuesta</button>
          </td>
          <td>
            <button onClick={actResValidado}>Validar Respuesta</button>
          </td>
          <td>
            <button onClick={actSolAtendido}>Solicitud Atendida</button>
          </td>
        </tr>
        </tbody>
      </table>       
    </div>
  );
}

export default AppFront;
